Garbage Collector(GC)

GC는 JVM의 Heap 영역에서 사용하지 않는 객체를 없애주는 프로세스

Heap 영역에서는 다양한 객체들이 존재함 또한 이객체들끼리는 서로 참조하여 사용됨.

참조
 1.객체는 힙내에 다른객체의 참조
 2.java스택의 참조(메서드 내의 지역변수나 파라미들에 의한 참조)
 3.JNI의 생성된 객체에 대한 참조
 4.메서드 영역의 Static 변수에의한 참조
 



Heap
----------------------------------------------------
객체를 저장하는 저장소 ex) String a ="안녕"  a => Stack에저장   "안녕"===> Heap에저장
1.Young Generation = 새로운 객체들을이 할당되는 영역

2.Old Generation = 오랫동안 계속 살아남은 객체들이 있는영역

3.Meta Sapce = gc가 일어날때 필요한 클래스와 메소드의 메타정보가있는 영역
-----------------------------------------------------





Young Generation 
---------------------------------------
1.Eden 영역
2.Survivor 0 영역
3.Sruvivor 1 영역
-------------------------------------------------
(첫번째로 할때)
1.새롭게 생성된 객체가 Eden 으로 들어온다(크기:1)
2.Eden이 꽉차면 Minor GC가 일어난다
3.Mark 과정이 일어난다(SCAN)
4.Reachable객체들을 Survivor 0 영역으로 이동시킨뒤 	
5.Unreachable객체들을 삭제한다
6.살아남은 Age값은 하나씩 증가한다

(두번째 이상)
7.다시 Eden 영역에 값이 할당되고
8.크기가 1이므로 다시 Minor GC가 발생
9.Mark 과정이 일어나지만 Eden 뿐아니라 Survivor0 영역에서도 일어남
10.이렇게 나온 Reachable한 객체들을 Survivor로 옮긴다
11.이렇게 계속 반복하면 age값이 임계점에 도달하게되는데 이객체들을 Old generation으로 
    이동시킨다 (promoted)
---------------------------------------------------


이렇게 Old generation이 채워지게 되고 Old generation이 가득채워지면 여기서는 Major GC가 일어난다


GC가 발생하면 GC수행 스레드외에 모은 스레드 작업을 중단시키는데 이걸 STOP-THE-WORLD라고한다
Minor 같은경우는 저장공간이적어서 몇초면되지만 Major gc는 소요되는 시간이 오래걸려 주의가 필요하다





GC는 Unerachable을 청소하는 역할

GC
------------------------------------------------------------------

Mark and Sweep   :  GC는 GC Root에서 시작해서 힙을 전부 스캔각 객체끼리 유효한 참조가 있으면 Reachable객체,그렇지 않다면 Unerachable 객체라고 판단함/// Mark/////    이중 Unerachable을 정리하는역할///Sweep////


Compact : sweep 후에 Heap 을 메모리 할당된부분(Reachable),과 할당되지 않은부분(Unerachable) 으로 나눈다
	 ===========> 메모리 단편화를 방지한다	

------------------------------------------------------------------





Stop the world
-------------------------------------------------
1.Serial GC : Mark and Sweep이후에 Compact를 통해 Heap을 정리하는것을 뜻함.

2.Parallel GC : 위에 Serial GC와 처리 과정은 동일하나 여러개의 쓰래드를 사용해 오버해드시간(GC의수행시간 Stop the world)을 줄인다 

3.Parallel Old GC: Parallel GC와 같지만 Old generation gc 를 다룬다 여기서는 Mark Sweep Compact가 아닌 Mark Summary Compaction이 사용되는데, Summary 단계에서는 앞서 GC를 수행한 영역에 대해서 별도로 살아있는 객체를 색별한다는 점에서 다르며 조금 더 복잡하다.

4.CMS(Concurrent Mark Sweep) GC:CMS(Concurrent Mark Sweep) GC는 Parallel GC와 마찬가지로 여러 개의 쓰레드를 이용한다. 하지만 기존의 Serial GC나 Parallel GC와는 다르게 Mark Sweep 알고리즘을 Concurrent하게 수행하게 된다. CMS GC가 수행될 때에는 자원이 GC를 위해서도 사용되므로 응답이 느려질 순 있지만 응답이 멈추지는 않게 된다. 하지만 Compaction 단계를 수행하지 않는다는 단점이 있다. 이 때문에 시스템이 장기적으로 운영되다가 조각난 메모리들이 많아 Compaction 단계가 수행되면 오히려 Stop The World 시간이 길어지는 문제가 발생할 수 있다.

5.G1(Garbage First) GC:G1(Garbage First) GC는 장기적으로 많은 문제를 일으킬 수 있는 CMS GC를 대체하기 위해 개발되었고, Java7부터 지원되기 시작하였다.
기존의 GC 알고리즘에서는 Heap 영역을 물리적으로 Young 영역(Eden 영역과 2개의 Survivor 영역)과 Old 영역으로 나누어 사용하였다. G1 GC는 Eden 영역에 할당하고, Survivor로 카피하는 등의 과정을 사용하지만 물리적으로 메모리 공간을 나누지 않는다. 대신 Region(지역)이라는 개념을 새로 도입하여 Heap을 균등하게 여러 개의 지역으로 나누고, 각 지역을 역할과 함께 논리적으로 구분하여(Eden 지역인지, Survivor 지역인지, Old 지역인지) 객체를 할당한다.
G1 GC에서는 Eden, Survivor, Old 역할에 더해 Humongous와 Availabe/Unused라는 2가지 역할을 추가하였다. Humonguous는 Region 크기의 50%를 초과하는 객체를 저장하는 Region을 의미하며, Availabe/Unused는 사용되지 않은 Region을 의미한다. 
G1 GC의 핵심은 Heap을 동일한 크기의 Region으로 나누고, 가비지가 많은 Region에 대해 우선적으로 GC를 수행하는 것이다. 
--------------------------------------------------



결론
----------------------------------------------------------------------
GC가 발생하면 GC수행 스레드외에 모은 스레드 작업을 중단시키는데 이걸 STOP-THE-WORLD라고한다
Minor 같은경우는 저장공간이적어서 몇초면되지만 Major gc는 소요되는 시간이 오래걸려 주의가 필요하다
이에따라 stop the world 오버헤드 시간이 늘어나고 어플리케이션의 완성도와 안전성과 최적화가 매우 떨어지게됨으로 gc는 꼭필요하다.
또한 메모리누수방지를 위해서라도 GC는 꼭필요하다 
------------------------------------------------------------------------











GC는 Unerachable을 청소하는 역할

GC
------------------------------------------------------------------

Mark and Sweep   :  GC는 GC Root에서 시작해서 힙을 전부 스캔각 객체끼리 유효한 참조가 있으면 Reachable객체,그렇지 				않다면 Unerachable 객체라고 판단함/// Mark/////    이중 Unerachable을 정리하는역할///Sweep////


Compact : sweep 후에 Heap 을 메모리 할당된부분(Reachable),과 할당되지 않은부분(Unerachable) 으로 나눈다
	 ===========> 메모리 단편화를 방지한다	

------------------------------------------------------------------

GC 가설
------------------------------------------------------------------
1. 대부분의 객체는 금방 접근 불가능한 상태가 된다.
2. 오래된 객체에서 젊은객체로의 참조는 아주 적게 존재한다.
-------------------------------------------------------------------

///https://devkingdom.tistory.com/268 -예제 참조 블로그




